fit <- randomForest(claim_or_not ~ ., data = data.rose,importance=TRUE, ntree=200)
Prediction <- predict(fit, test)
confusionMatrix(test$claim_or_not,Prediction )
fit <- randomForest(claim_or_not ~ ., data = data_balanced_over,importance=TRUE, ntree=1000)
Prediction <- predict(fit, test)
confusionMatrix(test$claim_or_not,Prediction )
library(xgboost)
library(readr)
library(stringr)
library(caret)
train2<-train
test2<-test
y=as.integer(train2$claim_or_not)
train2<-as.data.frame(train)
test2<-as.data.frame(test)
y=as.integer(train2$claim_or_not)
train2$claim_or_not<-as.integer(train2$claim_or_not)
df<-ADM.Project.Data
#df1<- df[,sapply(df, is.numeric)]
str(df)
names(df)
#remove variables with factors over 50
df<-df[-c(1,3,4,5,7,9,10,13,24,26)]
View(df)
#convert  variables to correct data types
df$PickUp_Time<- as.integer(df$PickUp_Time)
df$DropOff_Time<- as.integer(df$DropOff_Time)
df$claim_or_not<- as.factor(df$claim_or_not)
df$prepaid_rental<- as.factor(df$prepaid_rental)
df$Bundled<- as.factor(df$Bundled)
str(df)
names(df)
df<-df[-c(15)]
df<-df[-c(2,3,4,9)]
#df <- ADM.Project.Data[, -c(1, 2, 4,7) ]
View(df)
library(data.table)
library(stats)
library(caret)
df<- as.data.table(df)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(df))
## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
train2<-as.data.frame(train)
test2<-as.data.frame(test)
y=as.integer(train2$claim_or_not)
train2$claim_or_not<-as.integer(train2$claim_or_not)
test2$claim_or_not<-as.integer(test2$claim_or_not)
summary(y)
y<-ifelse (y==1,0,1)
summary(y)
xgb <- xgboost(data = data.matrix(train[,-1]),
label = y,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
xgb <- xgboost(data = data.matrix(train2[,-1]),
label = y,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
y_pred <- predict(xgb, data.matrix(test2[,-1]))
confusionMatrix(test2$claim_or_not,y_pred)
y_pred
model <- xgb.dump(y_pred, with.stats = T)
pred <- predict(y_pred, test2$claim_or_not)
err <- mean(as.numeric(pred > 0.5) != test2$claim_or_not)
pred<-ifelse (y_pred < 0.5,0,1)
pred <- predict(y_pred, test2$claim_or_not)
pred
pred <- predict(pred, test2$claim_or_not)
err <- mean(as.numeric(pred > 0.5) != test2$claim_or_not)
print(paste("test-error=", err))
library(readr)
Demographics <- read_csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Demographics.csv")
View(Demographics)
Demographics<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Demographics.csv")
View(Demographics)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv")
View(Previous_Loan)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = TRUE)
View(Previous_Loan)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = FALSE)
View(Previous_Loan)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = TRUE,skip = 1)
View(Previous_Loan)
Product_held<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Product Held in Bank.csv",header = TRUE,skip = 1)
View(Product_held)
Loan_Flag<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Purchased loan Flag.csv",header = TRUE,skip = 1)
View(loants)
View(Loan_Flag)
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)
View(Transaction_out)
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = TRUE,skip = 1,sep=" ", colClasses=c("NULL", NA, NA))
View(Previous_Loan)
Demographics<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Demographics.csv")[ ,1:3]
View(Demographics)
Previous_Loan<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Previous Loan Holdings.csv",header = TRUE,skip = 1)[ ,1:2]
View(Previous_Loan)
Product_held<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Product Held in Bank.csv",header = TRUE,skip = 1)[ ,1:2]
Loan_Flag<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Purchased loan Flag.csv",header = TRUE,skip = 1)[ ,1:2]
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)[ ,1:2]
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client ID", all = TRUE),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
all_data<-merge(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount, by='Client ID')
all_data<-merge(Demographics,Previous_Loan,by='Client ID')
View(Transaction_Amount)
View(Transaction_out)
View(Demographics)
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
View(All_data)
summary(All_data)
write.csv(All_data,"C:\Users\bola\Desktop\bolacareer\BOI_Case_Study")
write.csv(All_data,"C:\Users\bola\Desktop\bolacareer\BOI_Case_Study\customer_loan.csv")
write.csv(All_data,"C:\\Users\\bola\\Desktop\\bolacareer\\BOI_Case_Study\\customer_loan.csv")
Demographics<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Demographics.csv")
View(Demographics)
View(All_data)
names(All_data)
library(plyr)
rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
install.packages("outliers")
library(outliers)
outlier_tf1 = outlier(All_data,logical=TRUE)
All_data1rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
outlier_tf1 = outlier(All_data1$Average_CA_Trans,logical=TRUE)
bx <- boxplot(All_data1$Average_CA_Trans)
str(All_data1)
All_data1$Average_CA_Trans<-gsub(All_data1$Average_CA_Trans,"€","")
Str(All_data1)
str(All_data1)
summary(All_data1$Average_CA_Trans)
All_data1$Average_CA_Trans<- as.numeric(All_data1$Average_CA_Trans)
summary(All_data1$Average_CA_Trans)
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
All_data1$Average_CA_Trans<-gsub("€", "", All_data1$Average_CA_Trans, perl = TRUE)
str(All_data1)
All_data1$Average_CA_Trans<- as.numeric(All_data1$Average_CA_Trans)
summary(All_data1$Average_CA_Trans)
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)[ ,1:2]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
str(All_data1)
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
str(All_data1)
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)[ ,1:2]
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
Transaction_out<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/Transactions out of CA.csv",header = TRUE,skip = 1)[ ,1:2]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
str(All_data1)
All_data1$Average_CA_Trans
View(Transaction_Amount)
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
View(Transaction_Amount)
Transaction_Amount<-read.csv("C:/Users/bola/Desktop/bolacareer/BOI_Case_Study/TXN Amount.csv",header = TRUE,skip = 1)[ ,1:2]
View(Transaction_Amount)
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
All_data1<-rename(All_data, c("Gender..1..Female..2..Male"="Gender", "X..Products.in.bank"="NO_Of_Products",
"X...Transactions.out.of.CA.in.past.2.mths"="Trans_out_CA","Average.amount.of.CA.transaction"="Average_CA_Trans"))
str(All_data1)
All_data1$Trans_thirty_five<- ifelse(All_data1$Trans_out_CA < 35 ,0,1) #derived attributes
All_data1$Average_CA_Trans<- as.numeric(All_data1$Average_CA_Trans)
str(All_data1)
All_data1$ Loan.Flag<-as.factor(All_data1$ Loan.Flag)
All_data1$Gender<-as.factor(All_data1$Gender)
All_data1$Trans_thirty_five<- ifelse(All_data1$Trans_out_CA < 35 ,0,1) #derived attributes
str(All_data1)
All_data1$Trans_thirty_five<-as.factor(All_data1$Trans_thirty_five)
str(All_data1)
summary(All_data1)
bx <- boxplot(All_data1$Average_CA_Trans)
str(bx)
x2 <- x[!(All_data1$Average_CA_Trans %in% bx$out)]
x2 <- All_data1$Average_CA_Trans[!(All_data1$Average_CA_Trans %in% bx$out)]
x2
hist(X2)
boxplot(x2)
hist(x2)
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
bx <- boxplot(All_data1$Average_CA_Trans)
str(bx)
x2 <- All_data1$Average_CA_Trans[!(All_data1$Average_CA_Trans %in% bx$out)]
x2
hist(x2)
bb<- for (i in All_data1$Average_CA_Trans)
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
bx <- boxplot(All_data1$Average_CA_Trans)
str(bx)
x2 <- All_data1$Average_CA_Trans[!(All_data1$Average_CA_Trans %in% bx$out)]
x2
hist(x2)
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700){
delete(i){
else{
return (i)
}
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i){
else{
return (i)
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i)
{else
return (i)
}
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i)
else
return (i)
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i)
else
return (i<2700)
}
bb<- for (i in All_data1$Average_CA_Trans){
if(i > 2700)
delete(i)
else
print (i<2700)
}
myData = All_data1[All_data1$Trans_out_CA < 2700,]
myData = All_data1[All_data1$Trans_out_CA < 2700,]
myData = All_data1[All_data1$Trans_out_CA < 2700,]
View(myData)
myData = All_data1$Average_CA_Trans[All_data1$Trans_out_CA < 2700,]
myData = All_data1$[All_data1$Trans_out_CA < 2700,]
myData = All_data1[All_data1$Trans_out_CA < 2700,]
View(myData)
summary(myData$Trans_out_CA)
myData = All_data1[All_data1$Average_CA_Trans< 2700,]
summary(myData$Trans_out_CA)
summary(myData$Average_CA_Trans)
All_data1$Average_CA_Trans = All_data1[All_data1$Average_CA_Trans< 2700,]
summary(myData$Average_CA_Trans)
All_data1$Age = All_data1[All_data1$Age > 70,]
summary(myData$Age)
All_data1$Age = All_data1[All_data1$Age < 70,]
summary(myData$Age)
All_data1$Age = All_data1[All_data1$Age > 70,]
summary(myData$Age)
All_data1$Average_CA_Trans = All_data1[All_data1$Average_CA_Trans< 2700,]
summary(myData$Average_CA_Trans)
All_data1$Age = All_data1[All_data1$Age < 70,]
summary(myData$Age)
All_data1$Age = All_data1[All_data1$Age <= 70,]
summary(myData$Age)
summary(All_data1$Average_CA_Trans)
summary(All_data1$Age)
a<-subset(All_data1, Age<= 70)
View(a)
All_data1<-subset(All_data1, Age<= 70) # remove age over 70yrs
All_data1<-subset(All_data1, Average_CA_Trans<= 2700) # remove age over 70yrs
summary(All_data1)
length(unique(All_data1$Client.ID)) #count unique client id
n_occur <- data.frame(table(All_data1$Client.ID))
n_occur
n_occur[n_occur$Freq > 1,]
length(unique(All_data$Client.ID)) #count unique client id( 9763)
n_occur <- data.frame(table(All_data$Client.ID))
n_occur[n_occur$Freq > 1,]
n_occur <- data.frame(table(All_data1$Client.ID))
n_occur[n_occur$Freq > 1,]
deduped <- unique( All_data1 )
View(deduped)
View(deduped$Client.ID=='1220')
length(unique(All_data$Client.ID)) #count unique client id( 10000)
n_occur <- data.frame(table(All_data$Client.ID))
n_occur[n_occur$Freq > 1,]
All_data<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "Client.ID"),
list(Demographics,Previous_Loan,Product_held,Loan_Flag,Transaction_out,Transaction_Amount))
length(unique(All_data$Client.ID)) #count unique client id( 10000)
n_occur <- data.frame(table(All_data$Client.ID))
n_occur[n_occur$Freq > 1,]
View(All_data)
names(All_data)
install.packages('gtrendsR')
library(gtrendsR)
library(reshape2)
session <- gconnect("bolashofoluwe@gmail.com", "bolla123")
session <- gconnect("bolashofoluwe@gmail.com", "bolla123")
google.trends = gtrends(c("blu-ray"), gprop = "web", time = "all")[[1]]
session <- gconnect("google.user", "google.password")
sessionInfo()
scale(20)
scale(20)
?scale
setwd("C:/Users/bola/Desktop/Data Science Projects/Build_N_DeployR")
Age<- c(20)
salary<- c(20000)
df<- data.frame(Age,salary)
scale(df)
?scale
scale(df,scale-FALSE)
scale(df,scale=FALSE)
Age<- c(20,30,40)
salary<- c(20000,30000,40000)
df<- data.frame(Age,salary)
scale(df)
df
scale(df,scale = TRUE)
scale(df[1,],scale = TRUE)
#Logistic Regression
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Logistic Regression to the Training set
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred > 0.5)
#make cofusion matrix in caret
#install.packages('e1071')
#install.packages('caret')
library(e1071)
library(caret)
con= confusionMatrix(test_set[, 3], as.factor(y_pred ))
con
saveRDS(classifier, file = "model.Rds", compress = TRUE)
library(plumber)
model <- readRDS("model.Rds")
MODEL_VERSION <- "0.0.1"
VARIABLES <- list(
Age = "Age = # in Years",
EstimatedSalary = "EstimatedSalary = # in money",
Purchased = "Successful submission will results in a calculated purchased Probability from 0 to 1 (Unlikely to More Likely)"
)
# test API working --------------------------------------------------------
#* @get /healthcheck
health_check <- function() {
result <- data.frame(
"input" = "",
"status" = 200,
"model_version" = MODEL_VERSION
)
return(result)
}
# API landing page --------------------------------------------------------
#* @get /
#* @html
home <- function() {
title <- "Customer Purchases Predictions API"
body_intro <-  "Welcome to the Customer Purchases Predictions API!"
body_model <- paste("We are currently serving model version:", MODEL_VERSION)
body_msg <- paste("To received a prediction on Customer Purchases ,",
"submit the following variables to the <b>/Purchased</b> endpoint:",
sep = "\n")
body_reqs <- paste(VARIABLES, collapse = "<br>")
result <- paste(
"<html>",
"<h1>", title, "</h1>", "<br>",
"<body>",
"<p>", body_intro, "</p>",
"<p>", body_model, "</p>",
"<p>", body_msg, "</p>",
"<p>", body_reqs, "</p>",
"</body>",
"</html>",
collapse = "\n"
)
return(result)
}
# helper functions for predict --------------------------------------------
transform_purchased_data <- function(input_purchased_data) {
ouput_purchased_data <- data.frame(
Age = input_purchased_data$Age,
EstimatedSalary = input_purchased_data$EstimatedSalary
)
}
validate_feature_inputs <- function(Age, EstimatedSalary) {
Age_valid <- (Age >= 0 & Age < 200 | is.na(Age))
EstimatedSalary_valid <- (EstimatedSalary >= 0 & EstimatedSalary < 200000000000 | is.na(EstimatedSalary))
tests <- c("Age must be between 0 and 200 or NA",
"EstimatedSalary must not be over 200 million euros")
test_results <- c(Age_valid, EstimatedSalary_valid)
if(!all(test_results)) {
failed <- which(!test_results)
return(tests[failed])
} else {
return("OK")
}
}
# predict endpoint --------------------------------------------------------
#* @post /purchased
#* @get /purchased
predict_purchased <- function(Age=NA, EstimatedSalary=NA) {
#Age=readline(prompt="Enter Age: ")
#EstimatedSalary =readline(prompt="Enter EstimatedSalary : ")
Age = as.integer(Age)
EstimatedSalary = as.integer(EstimatedSalary)
data <- data.frame(Age=Age, EstimatedSalary=EstimatedSalary)
valid_input <- validate_feature_inputs(Age, EstimatedSalary)
if (valid_input[1] == "OK") {
payload <- data.frame(Age=Age, EstimatedSalary=EstimatedSalary)
clean_data <- transform_purchased_data(payload)
prediction <- predict(model, clean_data, type = "response")
result <- list(
input = list(payload),
reposnse = list("Purchased_probability" = prediction,
"Purchased_prediction" = (prediction >= 0.5)
),
status = 200,
model_version = MODEL_VERSION)
} else {
result <- list(
input = list(Age = Age_valid, EstimatedSalary_valid = EstimatedSalary_valid),
response = list(input_error = valid_input),
status = 400,
model_version = MODEL_VERSION)
}
return(result)
print(result)
}
library(plumber)
serve_model <- plumb("deploy_api.R")
serve_model$run(port = 8000)
